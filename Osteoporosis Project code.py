# -*- coding: utf-8 -*-
"""AI assessment google colab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16qAd-zxgTeUzVmN1yo05Q1qe9jZsLnEH
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df=pd.read_csv("Osteoporosis Dataset.csv")
df.head(10)

df.tail(10)

df.drop(columns="Id",axis=1,inplace=True)

df.shape

df.columns

df.nunique()

df.isnull().sum()

df["Gender"].value_counts()

df["Medical_Conditions"].value_counts()

df["Medications"].value_counts()

df.info()

df.Gender.replace(to_replace=["Female","Male"],value=[0,1],inplace=True)
df.Hormonal_Changes.replace(to_replace=["Postmenopausal","Normal"],value=[0,1],inplace=True)
df.replace(to_replace=["No","Yes"],value=[0,1],inplace=True)
df.Body_Weight.replace(to_replace=["Underweight","Normal"],value=[0,1],inplace=True)
df.Calcium_Intake	.replace(to_replace=["Low","Adequate"],value=[0,1],inplace=True)
df.Vitamin_D.replace(to_replace=["Insufficient","Sufficient"],value=[0,1],inplace=True)
df.Physical_Activity.replace(to_replace=["Sedentary","Active"],value=[0,1],inplace=True)
df.Ethnicity.replace(to_replace=["Asian","Caucasian","African American"],value=[1,2,3],inplace=True)
df.drop(columns="Alcohol_Consumption",axis=1,inplace=True)
#df.Alcohol_Consumption.replace(to_replace=["Moderate","None"]),value=[0,1],inplace=True)
#df["Alcohol_Consumption"].fillna(value=0,inplace=True)
#df['Alcohol_Consumption']=df['Alcohol_Consumption'].astype(int)
df.Medical_Conditions.replace(to_replace=["Hyperthyroidism","Rheumatoid Arthritis","None"],value=[1,2,3],inplace=True)
df["Medical_Conditions"].fillna(value=0,inplace=True)
#df['Medical_Conditions']=df["Medical_Conditions"].astype(int)
df.Medications.replace(to_replace=["Corticosteroids","None"],value=[1,0],inplace=True)
df["Medications"].fillna(value=0,inplace=True)
#df['Medications']=df['Medications'].astype(int)

df

df.info()

df.describe().T

plt.plot(df.Age.sort_values(ascending=True),df.Family_History.sort_values(ascending=True),marker="o")
plt.title("Family History vs Age")
plt.xlabel("Age")
plt.ylabel("Family_History")
plt.show()

from matplotlib import pyplot as plt
df['Age'].plot(kind='hist',edgecolor="r", bins=20, title='Age')
plt.gca().spines[['top', 'right',]].set_visible(False)

df["Osteoporosis"].value_counts().plot(kind="pie",colors=["r","g"],autopct="%.2f",explode=(0,0.05))
plt.title("Osteoporosis Prediction by Pie Chart")


import seaborn as sns
sns.heatmap(pd.crosstab(df["Gender"],df["Osteoporosis"]),annot=True,fmt='.3g',cmap="coolwarm",linecolor="black",linewidths=4)
plt.title("Heatmap for Gender vs Osteoporosis")

from sklearn.model_selection import train_test_split

x = df.drop("Osteoporosis", axis=1)
y = df["Osteoporosis"]
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)
(x_train.shape,y_train.shape) ,(x_test.shape, y_test.shape)

from sklearn.tree import DecisionTreeClassifier
DT=DecisionTreeClassifier()
DT=DT.fit(x_train,y_train)

x_train

x_test

#sf = [[69,0,1,1,0,1,0,0,1,0,1,0,1,0]]

#DT.predict(sf)

predictions=DT.predict(x_test)
predictions

DT.get_params()

from sklearn.metrics import confusion_matrix as cm
c_m=cm(y_test, predictions, labels=[0,1])
c_m

sns.heatmap(c_m, annot=True, fmt='.3g', cmap="YlGn", linecolor="brown", linewidths=4)
plt.title("Confusion Matrix")
plt.xlabel("Predicted Value")
plt.ylabel("Actual Value")

from sklearn.metrics import accuracy_score as a_s
a_s(y_test, predictions)

from sklearn.metrics import precision_score as ps
ps(y_test, predictions)

from sklearn.metrics import recall_score as rs
rs(y_test, predictions)

feature_names=x.columns
feature_names

feature_importance=pd.DataFrame(DT.feature_importances_, index=feature_names).sort_values(0, ascending=False)
feature_importance

explode = tuple([0.005] * len(feature_importance))
feature_importance.plot(kind="pie", subplots=True, autopct="%.2f", legend=True, explode=explode)
plt.legend(loc="upper right",bbox_to_anchor=(2,1))
plt.title("Feature Importance")

from sklearn import tree
fig=plt.figure(figsize=(20,20))
dtree=tree.plot_tree(DT,feature_names=feature_names,filled=True,fontsize=10)

nd= [69, 0, 1, 1, 0, 0, 0, 1, 1,0,1,0,1]
nd_df = pd.DataFrame([nd], columns=x.columns)
predictions = DT.predict(nd_df)
if (predictions==[0]):
  print("The patient dose not  has risk of having Osteoporosis")
else:
   print("The patient has risk of having Osteoporosis")

nd= [30, 1, 0, 1, 0 , 3, 0, 1, 1 ,0,1,0,1]
nd_df = pd.DataFrame([nd], columns=x.columns)
predictions = DT.predict(nd_df)
if (predictions==[0]):
  print("The patient dose not has risk of having  Osteoporosis")
else:
   print("The patient has risk of having  Osteoporosis"),
